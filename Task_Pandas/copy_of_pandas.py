# -*- coding: utf-8 -*-
"""Copy of Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AySzOlLj0Raceo8U5CJPWlKWZLM4ceNU

# ***Pandas***

***Pandas*** это высокоуровневая Python библиотека для анализа данных. Почему я её называю высокоуровневой, потому что построена она поверх более низкоуровневой библиотеки NumPy (написана на С), что является большим плюсом в производительности. 
В экосистеме Python, pandas является наиболее продвинутой и быстроразвивающейся библиотекой для обработки и анализа данных.

[***Документация***](https://pandas.pydata.org/)

[***Презентация***](https://docs.google.com/presentation/d/1-fECM3dRyoctiSlZ-I7cPBUKWw7bIHoi/edit#slide=id.p15)

# ***Библиотека pandas***

Библиотека pandas (http://pandas.pydata.org/) предоставляет дополнительные структуры данных для работы с массивами данных на языке Python. Ee основная абстракция - это проиндексированный многомерный массив значений DataFrame. 
Если вы собираетесь использовать Python для преобразования, разбиения, группирования и управления наборами данных, то pandas является бесценным инструментом для этих целей.

В рамках данного раздела мы будем использовать датасет [CERN Electron Collision Data](https://www.kaggle.com/datasets/fedesoriano/cern-electron-collision-data?resource=download)

# ***О датасете***

Этот набор данных содержит 100 тыс. диэлектронных событий в диапазоне инвариантных масс 2-110 ГэВ для использования в информационно-пропагандистской деятельности и образовании. Эти данные были отобраны для использования в образовательных и информационно-пропагандистских целях и содержат подмножество общей информации о событии. Критерии выбора могут отличаться от тех, которые используются в результатах CMS physics.

# ***Структура датасета***

1) Run: номер запуска события.



2) Event: номер события.

3, 11) E1, E2: полная энергия электрона (ГэВ) для электронов 1 и 2.

4, 5, 6, 12, 13, 14) px1, py1, px1, px2, py2, pz2: Компоненты импульса электрона 1 и 2(ГэВ).

7, 15) pt1, pt2: Поперечный импульс электрона 1 и 2 (ГэВ).

8, 16) eta1, eta2: Псевдоразвитость электрона 1 и 2.

9, 17) phi1, phi2: Угол П электрона 1 и 2 (рад).

10, 18) Q1, Q2: Заряд электрона 1 и 2.

19) M: Инвариантная масса двух электронов (ГэВ).

# ***Создание датафрейма на основе словаря python***
"""

import pandas as pd

df = pd.DataFrame({'A': [1, 2, 3], 'B':[4,5,6], 'C':[7,8,9]})
print(df)

# Получение информации о датафрейме 
print(df.info())

"""# ***Получение первых N строк датафрейма***"""

df.head(11) # где N=11, по умолчанию df.head() вернет первые 5 записей

"""# ***Считывание данных из файла***"""

import pandas as pd

df = pd.read_csv("/content/sample_data/dielectron.csv")
df

"""# ***Аттрибуты датафрейма***"""

df.columns

df.index

df.tail(7) # вывод 7 последних строк

"""# ***Анализ датафрейма***"""

df.describe()

"""# ***Транспонирование датафрейма***"""

df.describe().transpose()

"""# ***Выборка нескольких столбцов датафрейма***"""

import pandas as pd

necessary_columns = ["pt1","py1","pz1"]

df[necessary_columns]

"""# ***Вычисление новых значений датафрейма***"""

df["delta E"] = abs(df["E2"] - df["E1"])
df["sum Q"] = abs(df["Q2"] + df["Q1"])
df.head()

"""# ***Удаление колонок***"""

df = df.drop("sum Q", axis=1)
df.head()

"""# ***Получение строк датафрейма***"""

df.iloc[0]

df.loc[20:90]

"""# ***Выборка данных по условию (Conditional filtering)***

"""

condition_expression = df["E1"] >= 45

df[condition_expression]


### Или

df[df["E1"] >= 45]

"""and -> & = ЛОГИЧЕСКОЕ И



---


or -> | = ЛОГИЧЕСКОЕ ИЛИ
"""

df[(df["E1"] >= 45) & (df["delta E"] > 200)]

df[(df["E1"] >= 300) | (df["E2"] > 200)]

"""# ***Apply***

Функция Pandas DataFrame.apply() позволяет пользователю передать функцию и применить ее к каждому отдельному значению серии Pandas. Эта функция улучшает возможности библиотеки Pandas, поскольку помогает разделять данные в соответствии с требуемыми условиями. Так что ее можно эффективно использовать для науки о данных и машинного обучения.

Объекты, которые должны быть переданы в функцию, представляют собой объекты Series, индекс которых является либо индексом DataFrame, т. е. ось = 0, либо столбцами DataFrame, т. е. ось = 1.

По умолчанию result_type=None, а окончательный тип возвращаемого значения выводится из типа возвращаемого значения примененной функции. В противном случае это зависит от аргумента result_type.

"""

def check_deltaE(delta_E):

  if delta_E <= 15.2:
    return "Значение находится в самом низком диапазоне датафрейма"

  if delta_E > 15.2 and delta_E < 36.6:
    return "Значение находится в среднем диапазоне датафрейма"
  
  else:
    return "Значение находится в диапазоне самых больших чисел датафрейма"


df = df[df["delta E"] != 0]

df["check_deltaE"] = df["delta E"].apply(check_deltaE)


df

"""# ***Apply для нескольких колонок***"""

def calculate_ratio(first_column, second_column):
  return first_column / second_column


df["delta_pz"] = df[["pz1","pz2"]].apply(    
            lambda df: calculate_ratio(df["pz1"], df["pz2"]), axis=1)

df["delta_py"] = df[["py1","py2"]].apply(    
            lambda df: calculate_ratio(df["py1"], df["py2"]), axis=1)


df[["delta_py", "delta_pz"]]

import numpy as np


def calculate_ratio(first_column, second_column):
  return first_column / second_column


df["delta_pz"] = df[["pz1","pz2"]].apply(    
            lambda df: calculate_ratio(df["pz1"], df["pz2"]), axis=1)

df["delta_py"] = df[["py1","py2"]].apply(    
            lambda df: calculate_ratio(df["py1"], df["py2"]), axis=1)


df[["delta_py", "delta_pz"]]

"""# ***Статистическая информация и сортировка данных***"""

# сортировка колонки по возрастанию

df.sort_values("E1")

# сортировка колонки по убыванию

df.sort_values("E1", ascending=False)

# Получение максимального и минимального значения
df["E1"].max()

df["E1"].min()

# Получение индекса максимального и минимального значения

min_id = df["E2"].idxmin()
max_id = df["E2"].idxmax()

df.iloc[min_id] , df.iloc[max_id]

"""# ***Вычисление коэффициента корреляции***"""

df.corr()

"""# ***Вычисляем количество значений в датафрейме***"""

df["Q1"].value_counts()

"""# ***Вычисляем количество уникальных значений столбца в датафрейме***"""

df["py1"].unique() # получаем массив уникальных значений

df["py1"].nunique() # получаем количество значений

import pandas as pd

test_df = pd.DataFrame([1,1,2,2,3,3,3],["a", "b", "c", "d", "e", "f", "g"])

print(test_df)

print('')

test_df_without_duplicates = test_df.drop_duplicates()
test_df_without_duplicates

"""# ***between как альтернатива and***"""

df[df["E1"].between(20, 30, inclusive=True)]

#inclusive=True для включения крайнего значения (в нашем случае 30)

df["E1"].nlargest(8) # Получение N самых больших значений

df["E1"].nsmallest(6) # Получение N самых маленьких значений

"""# ***Получение части датафрейма рандомным образом***"""

random_data = df.sample(3) # получение 3 строк

frac_random_data = df.sample(frac=0.03) #получение 3% датафрейма

frac_random_data

"""# ***Работа с отсутствующими значениями (missing data)***"""

import pandas as pd
import numpy as np

test_data = pd.DataFrame({'A': [1, 2, np.nan], 'B':[np.nan,5,6], 'C':[7,np.nan,9], "D":[9,9,9]})

test_data

test_data.isnull()

test_data.notnull()

t_ = test_data.dropna(axis=1) # удаление столбцов с NaN значением
t = test_data.dropna(axis=0) # удаление строк с NaN значением
t_

data = test_data.dropna(subset=['A']) # удаляем строку с Nan значением в столбце A
data

test_data.fillna("значение не NaN")  # установка нового значения для всех NaN значений

# Замена отсутстсвующих значений на среднее значение столбца

test_data["A"] = test_data["A"].fillna(test_data["A"].mean())

test_data["B"] = test_data["B"].fillna(test_data["B"].mean())

test_data["C"] = test_data["C"].fillna(test_data["C"].mean())

test_data

"""# ***Замена отсутствующих данных с помощью интерполяции***"""

test_serie = pd.Series({'A': 2, 'B':np.nan, 'C':6, "D":8})

test_serie.interpolate()

"""# ***Объединение датафреймов***"""

import pandas as pd

# Объединение датафреймов с помощью методв concat

df_1 = pd.DataFrame({'A': [1, 2, 3], 'B':[4,5,6], 'C':[7,8,9], "D":[9,10,11]})

df_2 = pd.DataFrame({'E': [12,13,14], 'F':[15,16, 17]})


result_df = pd.concat([df_1, df_2], axis=1) # при передаче axis = 1 
                                            # объединение происходит по строкам

column_result_df = pd.concat([df_1, df_2], axis=0) # при передаче axis = 0 
                                            # объединение происходит по столбцам
print("AXIS = 0")
print(column_result_df)

print("AXIS = 1")
print(result_df)

"""# ***Объединение датафреймов с помощью команды merge***

Для объединения датафрейма командой merge используется следующий синтаксис:
pd.merge(first_df, second_df, how="merge_type", on="column_name")

где first_df и second_df - датафреймы для слияния, а 
name - имя колонки по которой мы будем соединять два датафрейма(должно быть уникальным значением), 
how - тип слияния ( inner/ left/ right/ outer)


В примере ниже рассмотрим два датафрейма:
experiment_data содержит данные зависимости напряжения в определенный момент времени, а в experiment_data_res мы записывали значения сопротивления в этот же момент времени. Теперь нам нужно объединить данные в один датафрейм идентифицируя строки по значению времени.


"""

experiment_data = pd.DataFrame({"Time": [0.0000, 0.1000,	0.2000,	0.3000, 
                                         0.4000,	0.5000,	0.6000,	0.7000,	
                                         0.8000,	0.9000,	1.0000,	1.1000,
                                         1.2000, 1.3000, 1.4000, 1.5000, 
                                         1.6000, 1.7000, 1.8000, 1.9000,
                                         2.0000, 2.1000, 2.2000, 2.3000, 
                                         2.4000, 2.5000, 2.6000, 2.7000,
                                         2.8000, 2.9000, 3.0000, 3.1000,
                                         3.2000, 3.3000, 3.4000, 3.5000, 
                                         3.6000, 3.7000, 3.8000, 3.9000,4.0000],
                                 
                                 "Voltage":[ 0.002, 0.003, 0.002, 0.003, 0.002,
                                            0.002, 0.002, 0.004, 0.003, 0.003,
                                            0.002, 0.003, 0.003, 0.001, 
                                            -6.104E-4, 0.005, 0.004, 0.004, 
                                            0.005,0.002, 1.308, 1.307, 1.305,
                                            1.303, 1.301, 1.300, 1.299, 1.295,
                                            1.295, 1.293, 1.291, 1.290, 1.288,
                                            1.287,1.285, 1.284, 1.281, 1.281,
                                            1.279,1.276,1.275
                                            ]})


experiment_data_res = pd.DataFrame({"Time": [0.0000, 0.1000,	0.2000,	0.3000, 
                                         0.4000,	0.5000,	0.6000,	0.7000,	
                                         0.8000,	0.9000,	1.0000,	1.1000,
                                         1.2000, 1.3000, 1.4000, 1.5000, 
                                         1.6000, 1.7000, 1.8000, 1.9000,
                                         2.0000, 2.1000, 2.2000, 2.3000, 
                                         2.4000, 2.5000, 2.6000, 2.7000,
                                         2.8000, 2.9000, 3.0000, 3.1000,
                                         3.2000, 3.3000, 3.4000, 3.5000, 
                                         3.6000, 3.7000, 3.8000, 3.9000,4.0000],
                                 
                                 "Resistance":[ 0.78, 0.8, 0.81, 0.79, 0.81,
                                            0.82, 0.83, 0.8, 0.81, 0.83,
                                            0.002, 0.84, 0.79, 0.84, 
                                            -6.104E-3, 0.9, 0.89, 0.92, 
                                            0.93,0.9, 1.2, 1.1, 1.3,
                                            1.25, 1.33, 1.35, 1.299, 1.299,
                                            1.29, 1.223, 1.231, 1.210, 1.388,
                                            1.281,1.282, 1.384, 1.181, 1.241,
                                            1.124,1.179,1.205
                                            ]})

result_df = pd.merge(experiment_data, experiment_data_res, 
                     how="inner", on="Time")
result_df

"""# ***Виды соединений***

Виды соединений - Inner, Left, Right и Outer Joins


---

## ***Внутреннее соединение - Inner Join***

Соединяет строки, для которых ключ присутствует в ОБЕИХ таблицах. В результате такого соединения мы не получим значений NaN, потому что по определению значения в ключевых колонках должны существовать в обеих таблицах.


## ***Левое соединение - Left Join***

Находит соответствующие строки и включает в результат все строки из левой таблицы (если смотреть на список таблиц - левая таблица это та таблица, которая находится слева в этом списке).
Выводим все строки из левой таблицы experiment_data, и если у них нет строки в таблице experiment_data_res, то заполняем колонки значениями NaN.

## ***Правое соединение - Right Join***

Находит соответствующие строки и включает в результат все строки из правой таблицы.
Отобразить все строки из правой таблицы, и если для них нет соответствия в левой таблице, то записать в колонки из левой таблицы значения NaN.


## ***Внешнее соединение - Outer Join***

Показать строки, которые нашлись или в левой, или в правой таблице. В нашем примере это все строки из таблицы experiment_data и из таблицы experiment_data_res. Там, где не нашлись соответствующие строки, пишем значения NaN.

"""

# LEFT JOIN
experiment_data = pd.DataFrame({"Time": [0.0000, 0.1000,	0.2000,	0.3000, 
                                         0.4000,	0.5000,	0.6000,	0.7000,	
                                         0.8000,	0.9000,	1.0000,	1.1000,
                                         1.2000, 1.3000, 1.4000, 1.5000, 
                                         1.6000, 1.7000, 1.8000, 1.9000,
                                         2.0000, 2.1000, 2.2000, 2.3000, 
                                         2.4000, 2.5000, 2.6000, 2.7000,
                                         2.8000, 2.9000, 3.0000, 3.1000,
                                         3.2000, 3.3000, 3.4000, 3.5000, 
                                         3.6000, 3.7000, 3.8000, 3.9000,4.0000,
                                         #Добавим новые значения Time, которых нет в 
                                         # experiment_data_res
                                         4.2, 4.1, 4.3, 4.4, 4.5

                                         ],
                                 
                                 "Voltage":[ 0.002, 0.003, 0.002, 0.003, 0.002,
                                            0.002, 0.002, 0.004, 0.003, 0.003,
                                            0.002, 0.003, 0.003, 0.001, 
                                            -6.104E-4, 0.005, 0.004, 0.004, 
                                            0.005,0.002, 1.308, 1.307, 1.305,
                                            1.303, 1.301, 1.300, 1.299, 1.295,
                                            1.295, 1.293, 1.291, 1.290, 1.288,
                                            1.287,1.285, 1.284, 1.281, 1.281,
                                            1.279,1.276,1.275,
                                            #Добавим новые значения Voltage, 
                                            # соответствующие новым значениям для Time
                                            1.222, 2.3333, 1.1111, 1.4333, 1.5

                                            ]})

experiment_data_res = pd.DataFrame({"Time": [0.0000, 0.1000,	0.2000,	0.3000, 
                                         0.4000,	0.5000,	0.6000,	0.7000,	
                                         0.8000,	0.9000,	1.0000,	1.1000,
                                         1.2000, 1.3000, 1.4000, 1.5000, 
                                         1.6000, 1.7000, 1.8000, 1.9000,
                                         2.0000, 2.1000, 2.2000, 2.3000, 
                                         2.4000, 2.5000, 2.6000, 2.7000,
                                         2.8000, 2.9000, 3.0000, 3.1000,
                                         3.2000, 3.3000, 3.4000, 3.5000, 
                                         3.6000, 3.7000, 3.8000, 3.9000,4.0000],
                                 
                                 "Resistance":[ 0.78, 0.8, 0.81, 0.79, 0.81,
                                            0.82, 0.83, 0.8, 0.81, 0.83,
                                            0.002, 0.84, 0.79, 0.84, 
                                            -6.104E-3, 0.9, 0.89, 0.92, 
                                            0.93,0.9, 1.2, 1.1, 1.3,
                                            1.25, 1.33, 1.35, 1.299, 1.299,
                                            1.29, 1.223, 1.231, 1.210, 1.388,
                                            1.281,1.282, 1.384, 1.181, 1.241,
                                            1.124,1.179,1.205
                                            ]})

result_df = pd.merge(experiment_data, experiment_data_res, 
                     how="left", on="Time")
result_df[35:]

# RIGHT JOIN

experiment_data = pd.DataFrame({"Time": [0.0000, 0.1000,	0.2000,	0.3000, 
                                         0.4000,	0.5000,	0.6000,	0.7000,	
                                         0.8000,	0.9000,	1.0000,	1.1000,
                                         1.2000, 1.3000, 1.4000, 1.5000, 
                                         1.6000, 1.7000, 1.8000, 1.9000,
                                         2.0000, 2.1000, 2.2000, 2.3000, 
                                         2.4000, 2.5000, 2.6000, 2.7000,
                                         2.8000, 2.9000, 3.0000, 3.1000,
                                         3.2000, 3.3000, 3.4000, 3.5000, 
                                         3.6000, 3.7000, 3.8000, 3.9000,4.0000,
                                         #Добавим новые значения Time, которых нет в 
                                         # experiment_data_res
                                         4.2, 4.1, 4.3, 4.4, 4.5

                                         ],
                                 
                                 "Voltage":[ 0.002, 0.003, 0.002, 0.003, 0.002,
                                            0.002, 0.002, 0.004, 0.003, 0.003,
                                            0.002, 0.003, 0.003, 0.001, 
                                            -6.104E-4, 0.005, 0.004, 0.004, 
                                            0.005,0.002, 1.308, 1.307, 1.305,
                                            1.303, 1.301, 1.300, 1.299, 1.295,
                                            1.295, 1.293, 1.291, 1.290, 1.288,
                                            1.287,1.285, 1.284, 1.281, 1.281,
                                            1.279,1.276,1.275,
                                            #Добавим новые значения Voltage, 
                                            # соответствующие новым значениям для Time
                                            1.222, 2.3333, 1.1111, 1.4333, 1.5

                                            ]})

experiment_data_res = pd.DataFrame({"Time": [0.0000, 0.1000,	0.2000,	0.3000, 
                                         0.4000,	0.5000,	0.6000,	0.7000,	
                                         0.8000,	0.9000,	1.0000,	1.1000,
                                         1.2000, 1.3000, 1.4000, 1.5000, 
                                         1.6000, 1.7000, 1.8000, 1.9000,
                                         2.0000, 2.1000, 2.2000, 2.3000, 
                                         2.4000, 2.5000, 2.6000, 2.7000,
                                         2.8000, 2.9000, 3.0000, 3.1000,
                                         3.2000, 3.3000, 3.4000, 3.5000, 
                                         3.6000, 3.7000, 3.8000, 3.9000,4.0000],
                                 
                                 "Resistance":[ 0.78, 0.8, 0.81, 0.79, 0.81,
                                            0.82, 0.83, 0.8, 0.81, 0.83,
                                            0.002, 0.84, 0.79, 0.84, 
                                            -6.104E-3, 0.9, 0.89, 0.92, 
                                            0.93,0.9, 1.2, 1.1, 1.3,
                                            1.25, 1.33, 1.35, 1.299, 1.299,
                                            1.29, 1.223, 1.231, 1.210, 1.388,
                                            1.281,1.282, 1.384, 1.181, 1.241,
                                            1.124,1.179,1.205
                                            ]})

result_df = pd.merge(experiment_data_res, experiment_data, 
                     how="right", on="Time")
result_df[35:]

# OUTER JOIN

experiment_data = pd.DataFrame({"Time": [0.0000, 0.1000,	0.2000,	0.3000, 
                                         0.4000,	0.5000,	0.6000,	0.7000,	
                                         0.8000,	0.9000,	1.0000,	1.1000,
                                         1.2000, 1.3000, 1.4000, 1.5000, 
                                         1.6000, 1.7000, 1.8000, 1.9000,
                                         2.0000, 2.1000, 2.2000, 2.3000, 
                                         2.4000, 2.5000, 2.6000, 2.7000,
                                         2.8000, 2.9000, 3.0000, 3.1000,
                                         3.2000, 3.3000, 3.4000, 3.5000, 
                                         3.6000, 3.7000, 3.8000, 3.9000,4.0000,
                                         #Добавим новые значения Time, которых нет в 
                                         # experiment_data_res
                                         4.2, 4.1, 4.3, 4.4, 4.5

                                         ],
                                 
                                 "Voltage":[ 0.002, 0.003, 0.002, 0.003, 0.002,
                                            0.002, 0.002, 0.004, 0.003, 0.003,
                                            0.002, 0.003, 0.003, 0.001, 
                                            -6.104E-4, 0.005, 0.004, 0.004, 
                                            0.005,0.002, 1.308, 1.307, 1.305,
                                            1.303, 1.301, 1.300, 1.299, 1.295,
                                            1.295, 1.293, 1.291, 1.290, 1.288,
                                            1.287,1.285, 1.284, 1.281, 1.281,
                                            1.279,1.276,1.275,
                                            #Добавим новые значения Voltage, 
                                            # соответствующие новым значениям для Time
                                            1.222, 2.3333, 1.1111, 1.4333, 1.5

                                            ]})

experiment_data_res = pd.DataFrame({"Time": [0.0000, 0.1000,	0.2000,	0.3000, 
                                         0.4000,	0.5000,	0.6000,	0.7000,	
                                         0.8000,	0.9000,	1.0000,	1.1000,
                                         1.2000, 1.3000, 1.4000, 1.5000, 
                                         1.6000, 1.7000, 1.8000, 1.9000,
                                         2.0000, 2.1000, 2.2000, 2.3000, 
                                         2.4000, 2.5000, 2.6000, 2.7000,
                                         2.8000, 2.9000, 3.0000, 3.1000,
                                         3.2000, 3.3000, 3.4000, 3.5000, 
                                         3.6000, 3.7000, 3.8000, 3.9000,4.0000],
                                 
                                 "Resistance":[ 0.78, 0.8, 0.81, 0.79, 0.81,
                                            0.82, 0.83, 0.8, 0.81, 0.83,
                                            0.002, 0.84, 0.79, 0.84, 
                                            -6.104E-3, 0.9, 0.89, 0.92, 
                                            0.93,0.9, 1.2, 1.1, 1.3,
                                            1.25, 1.33, 1.35, 1.299, 1.299,
                                            1.29, 1.223, 1.231, 1.210, 1.388,
                                            1.281,1.282, 1.384, 1.181, 1.241,
                                            1.124,1.179,1.205
                                            ]})

result_df = pd.merge(experiment_data_res, experiment_data, 
                     how="outer", on="Time")
result_df

"""# ***Запись датафрейма в файл***"""

experiment_data = pd.DataFrame({"Time": [0.0000, 0.1000,	0.2000,	0.3000, 
                                         0.4000,	0.5000,	0.6000,	0.7000,	
                                         0.8000,	0.9000,	1.0000,	1.1000,
                                         1.2000, 1.3000, 1.4000, 1.5000, 
                                         1.6000, 1.7000, 1.8000, 1.9000,
                                         2.0000, 2.1000, 2.2000, 2.3000, 
                                         2.4000, 2.5000, 2.6000, 2.7000,
                                         2.8000, 2.9000, 3.0000, 3.1000,
                                         3.2000, 3.3000, 3.4000, 3.5000, 
                                         3.6000, 3.7000, 3.8000, 3.9000,4.0000,
                                         #Добавим новые значения Time, которых нет в 
                                         # experiment_data_res
                                         4.2, 4.1, 4.3, 4.4, 4.5

                                         ],
                                 
                                 "Voltage":[ 0.002, 0.003, 0.002, 0.003, 0.002,
                                            0.002, 0.002, 0.004, 0.003, 0.003,
                                            0.002, 0.003, 0.003, 0.001, 
                                            -6.104E-4, 0.005, 0.004, 0.004, 
                                            0.005,0.002, 1.308, 1.307, 1.305,
                                            1.303, 1.301, 1.300, 1.299, 1.295,
                                            1.295, 1.293, 1.291, 1.290, 1.288,
                                            1.287,1.285, 1.284, 1.281, 1.281,
                                            1.279,1.276,1.275,
                                            #Добавим новые значения Voltage, 
                                            # соответствующие новым значениям для Time
                                            1.222, 2.3333, 1.1111, 1.4333, 1.5

                                            ]})

experiment_data_res = pd.DataFrame({"Time": [0.0000, 0.1000,	0.2000,	0.3000, 
                                         0.4000,	0.5000,	0.6000,	0.7000,	
                                         0.8000,	0.9000,	1.0000,	1.1000,
                                         1.2000, 1.3000, 1.4000, 1.5000, 
                                         1.6000, 1.7000, 1.8000, 1.9000,
                                         2.0000, 2.1000, 2.2000, 2.3000, 
                                         2.4000, 2.5000, 2.6000, 2.7000,
                                         2.8000, 2.9000, 3.0000, 3.1000,
                                         3.2000, 3.3000, 3.4000, 3.5000, 
                                         3.6000, 3.7000, 3.8000, 3.9000,4.0000],
                                 
                                 "Resistance":[ 0.78, 0.8, 0.81, 0.79, 0.81,
                                            0.82, 0.83, 0.8, 0.81, 0.83,
                                            0.002, 0.84, 0.79, 0.84, 
                                            -6.104E-3, 0.9, 0.89, 0.92, 
                                            0.93,0.9, 1.2, 1.1, 1.3,
                                            1.25, 1.33, 1.35, 1.299, 1.299,
                                            1.29, 1.223, 1.231, 1.210, 1.388,
                                            1.281,1.282, 1.384, 1.181, 1.241,
                                            1.124,1.179,1.205
                                            ]})

result_df = pd.merge(experiment_data_res, experiment_data, 
                     how="outer", on="Time")

# Запись датафрейма в формат CSV
file_ = result_df.to_csv("result_df")


# Запись датафрейма в формат JSON
file_ = result_df.to_json("result_json_df")


# Запись датафрейма в формат xlsx
file_ = result_df.to_excel("result_excel_df.xlsx")

"""
# ***Агрегация данных с groupby***


Чтобы использовать объект groupby, нам нужно сообщить pandas, как мы хотим агрегировать данные.

# ***Наиболее частые варианты:***
mean(): среднее значение 

sum(): сумма значений

size(): размер группы

count(): количество элементов

std(): среднеквадратичное отклонение 
(standard deviation)

var(): дисперсия (variance)

sem(): стандартная ошибка среднего (standard error of the mean)

describe(): суммарные статистики

first(): первое значение

last(): последнее значение

nth() : n-ое значение, или набор значений если n является списком

min(): минимальное значение

max(): максимальное значение
"""

import pandas as pd

experiment_data = pd.DataFrame({"Time": [0.0000, 0.1000,	0.2000,	0.3000, 
                                         0.4000,	0.5000,	0.6000,	0.7000,	
                                         0.8000,	0.9000,	1.0000,	1.1000,
                                         1.2000, 1.3000, 1.4000, 1.5000, 
                                         1.6000, 1.7000, 1.8000, 1.9000,
                                         2.0000, 2.1000, 2.2000, 2.3000, 
                                         2.4000, 2.5000, 2.6000, 2.7000,
                                         2.8000, 2.9000, 3.0000, 3.1000,
                                         3.2000, 3.3000, 3.4000, 3.5000, 
                                         3.6000, 3.7000, 3.8000, 3.9000,4.0000
                                         ],
                                 
                                 "Voltage":[ 0.002, 0.003, 0.002, 0.003, 0.002,
                                            0.002, 0.002, 0.004, 0.003, 0.003,
                                            0.002, 0.003, 0.003, 0.001, 
                                            -6.104E-4, 0.005, 0.004, 0.004, 
                                            0.005,0.002, 1.308, 1.307, 1.305,
                                            1.303, 1.301, 1.300, 1.299, 1.295,
                                            1.295, 1.293, 1.291, 1.290, 1.288,
                                            1.287,1.285, 1.284, 1.281, 1.281,
                                            1.279,1.276,1.275],
                                
                                "Resistance":[ 0.78, 0.8, 0.81, 0.79, 0.81,
                                            0.82, 0.83, 0.8, 0.81, 0.83,
                                            0.002, 0.84, 0.79, 0.84, 
                                            -6.104E-3, 0.9, 0.89, 0.92, 
                                            0.93,0.9, 1.2, 1.1, 1.3,
                                            1.25, 1.33, 1.35, 1.299, 1.299,
                                            1.29, 1.223, 1.231, 1.210, 1.388,
                                            1.281,1.282, 1.384, 1.181, 1.241,
                                            1.124,1.179,1.205
                                            ],
                                
                                "Laboratory": ['Laboratory_2',
                                                'Laboratory_3',
                                                'Laboratory_3',
                                                'Laboratory_1',
                                                'Laboratory_3',
                                                'Laboratory_1',
                                                'Laboratory_1',
                                                'Laboratory_3',
                                                'Laboratory_2',
                                                'Laboratory_2',
                                                'Laboratory_1',
                                                'Laboratory_2',
                                                'Laboratory_3',
                                                'Laboratory_3',
                                                'Laboratory_2',
                                                'Laboratory_3',
                                                'Laboratory_3',
                                                'Laboratory_3',
                                                'Laboratory_1',
                                                'Laboratory_1',
                                                'Laboratory_3',
                                                'Laboratory_2',
                                                'Laboratory_3',
                                                'Laboratory_3',
                                                'Laboratory_3',
                                                'Laboratory_3',
                                                'Laboratory_3',
                                                'Laboratory_1',
                                                'Laboratory_3',
                                                'Laboratory_2',
                                                'Laboratory_1',
                                                'Laboratory_3',
                                                'Laboratory_3',
                                                'Laboratory_3',
                                                'Laboratory_3',
                                                'Laboratory_1',
                                                'Laboratory_2',
                                                'Laboratory_2',
                                                'Laboratory_3',
                                                'Laboratory_1',
                                               'Laboratory_3']})

group_data = experiment_data.groupby("Laboratory")

group_data.mean()

"""# ***Задачи для самостоятельного решения***

# ***О датасете***
[Набор данных](https://www.kaggle.com/datasets/deepu1109/star-dataset), состоящий из нескольких характеристик звезд.
Можно скачать по ссылке или из блокнота ниже.

Это набор данных, состоящий из нескольких характеристик звезд.

***Некоторые из них являются:***

Абсолютная температура (в К)

Относительная яркость (L/Lo)

Относительный радиус (R/Ro)

Абсолютная магнитуда (Мв)

Цвет звезды (белый, красный, синий, желтый, желто-оранжевый и т.д.)

Спектральный класс (O, B,A, F, G, K,,M)

Тип звезды 
** (Красный карлик, Коричневый карлик, Белый карлик, Главная последовательность, Сверхгиганты, гипергиганты)**

(Red Dwarf, Brown Dwarf, White Dwarf, Main Sequence , SuperGiants, HyperGiants)

Lo = 3,828 x 10^26 Вт (средняя яркость Солнца)

Ro = 6,9551 x 10^8 м (средний радиус Солнца)


**Цель:**

Цель создания набора данных - доказать, что звезды соответствуют определенному графику в небесном пространстве,
конкретно называемому диаграммой Герцшпрунга-Рассела или просто HR-диаграммой
, чтобы мы могли классифицировать звезды, нанося их характеристики на основе этого графика.
"""

import pandas as pd

df = pd.read_csv("https://storage.googleapis.com/kagglesdsdata/datasets/391127/754362/6%20class%20csv.csv?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20230309%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20230309T202714Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=23aceffe8c6522e64347ccc62baacc671f3d6375e48dc95bb99c27e22b36223633b4cb362ea5e15ef7de4b0ad1d848c7409f4e2bd0367c1541d1b814669452026f13cc26cd40ebddddf7e79a16c1c4ff68e671dbc953f31995b6de2470f7f4c6d254d81a9c8bd1caced68bfec395083267258d0d076c97baec4d5a89540827f0776eddb281bbbf56c485da7d850ae123b98b9e6db9326ef57c372e73262fa4ad24f9389ee1ac87681b39996217f8207f3ca849ae350b21ee1037b4ec0b0293c2bd0fc95188d820c900a3276f4479919b973f8c7095aeddfe5a749a1f54100eca6872a30c1a3ef7dbfc5ea23d81013f30f726dde47da95abdcebfbc53eef04b9d")
df

"""# Web Scrapping"""

import pandas as pd 

the_most_popular_films_df = pd.read_html("https://en.wikipedia.org/wiki/List_of_highest-grossing_films")
the_most_popular_films_df[0]

import pandas as pd 

the_most_popular_films_df = pd.read_html("https://en.wikipedia.org/wiki/List_of_highest-grossing_films")
length = len(the_most_popular_films_df) - 1
films_list = []

for index in range(length):
  elem = the_most_popular_films_df[index]
  films_list.append(elem)

print(films_list)

"""# ***Задачи для самостоятельного решения по разделу Pandas***





1.   Получить подробную информацию о датафрейме (count, mean, std, min, 25%, 50%, 75%, max). Полученный датафрейм транспонировать. Также вывести список колонок датафрейма и информацию о типах данных колонок датафрейма. На основе полученной информации создать датафрейм и записать его в формате JSON.


2.   Вычислить среднее значение колонки Temperature и добавить новую колонку delta_T, в которой хранится модуль разности текущей Temperature и средней. Проверить содержит ли датафрейм NaN значения.
Вычислить максимальное значение Temperature.
Вернуть датафрейм в котором delta_T <= Tmax/2 и Temperature >= delta_Tmin.
Полученный датафрейм сохранить в формате CSV.

3.   Вычислить коэффициент корреляции датафрейма. 
Вычислить среднее значение Absolute magnitude(Mv) для каждого Star type. Вычислить количество записей для каждого спектрального класса. 

4.   Для каждого спектрального класса вычислить дисперсию для Luminosity(L/Lo), стандартная ошибка среднего для Absolute magnitude(Mv) и среднеквадратичное отклонение для Temperature. На основе данных создать датафрейм и записать в excel файл. 

5. На основании датасета df создать новый датафрейм new_df с двумя колонками Temperature и temperature_C, где 

  `new_df["Temperature"] = df["Temperature"] `

  а в колонке temperature_C хранится значение температуры в С.

  Соединить два датафрейма в один, как минимум тремя разными способами.

  После соединения проверить датафрейм на наличие NaN значений.
  Заменить отсутствующие данные следующими способами:
  1. Для всех NaN значений установить среднее значение столбца.

  2. Заменить NaN значения с помощью интерполяции.

  3. Удалить строки содержащие NaN значения. 

"""